/*
 * Core
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/*
 * Core
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, NaiveDate, Utc};
/// UpdateSecretsRequest
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateSecretsRequest {
    /// Unique identifier for the project object.
    #[serde(rename = "project")]
    pub project: String ,
    /// Name of the config object.
    #[serde(rename = "config")]
    pub config: String ,
    #[serde(rename = "secrets", skip_serializing_if = "Option::is_none")]
    pub secrets: Option<models::SecretsUpdateMap >,
    /// Either `secrets` or `change_requests` is required (can't use both). Object of secrets you would like to save to the config. Try it with the sample secrets below.
    #[serde(rename = "change_requests", skip_serializing_if = "Option::is_none")]
    pub change_requests: Option<Vec<models::SecretChangeRequest> >,
}

impl UpdateSecretsRequest {
    pub fn new(project: String , config: String ) -> UpdateSecretsRequest {
        UpdateSecretsRequest {
            project: project,
            config: config,
            secrets: None,
            change_requests: None,
        }
    }
}
 