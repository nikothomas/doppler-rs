/*
 * Core
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/*
 * Core
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, NaiveDate, Utc};
/// RevokeDynamicSecretLeaseRequest
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RevokeDynamicSecretLeaseRequest {
    /// The project where the dynamic secret is located
    #[serde(rename = "project")]
    pub project: String ,
    /// The config where the dynamic secret is located
    #[serde(rename = "config")]
    pub config: String ,
    /// The name of the dynamic secret from which this lease was issued
    #[serde(rename = "dynamic_secret")]
    pub dynamic_secret: String ,
    /// The slug of the lease to revoke
    #[serde(rename = "slug")]
    pub slug: String ,
}

impl RevokeDynamicSecretLeaseRequest {
    pub fn new(project: String , config: String , dynamic_secret: String , slug: String ) -> RevokeDynamicSecretLeaseRequest {
        RevokeDynamicSecretLeaseRequest {
            project: project,
            config: config,
            dynamic_secret: dynamic_secret,
            slug: slug,
        }
    }
}
 