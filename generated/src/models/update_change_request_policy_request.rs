/*
 * Core
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/*
 * Core
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, NaiveDate, Utc};
/// UpdateChangeRequestPolicyRequest
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateChangeRequestPolicyRequest {
    /// The name of the policy.
    #[serde(rename = "name")]
    pub name: String ,
    /// An optional description of the policy.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String >,
    /// A list of rules the policy enforces.
    #[serde(rename = "rules")]
    pub rules: Vec<models::PolicyRule> ,
    #[serde(rename = "targets")]
    pub targets: models::PolicyTargetsRequest ,
}

impl UpdateChangeRequestPolicyRequest {
    pub fn new(name: String , rules: Vec<models::PolicyRule> , targets: models::PolicyTargetsRequest ) -> UpdateChangeRequestPolicyRequest {
        UpdateChangeRequestPolicyRequest {
            name: name,
            description: None,
            rules: rules,
            targets: targets,
        }
    }
}
 