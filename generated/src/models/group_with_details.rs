/*
 * Core
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/*
 * Core
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, NaiveDate, Utc};
/// GroupWithDetails
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GroupWithDetails {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String >,
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String >,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<chrono::DateTime<chrono::Utc> >,
    #[serde(rename = "default_project_role", skip_serializing_if = "Option::is_none")]
    pub default_project_role: Option<models::GroupDefaultProjectRole >,
    #[serde(rename = "projects", skip_serializing_if = "Option::is_none")]
    pub projects: Option<Vec<models::GroupProject> >,
    #[serde(rename = "members", skip_serializing_if = "Option::is_none")]
    pub members: Option<Vec<models::GroupMember> >,
}

impl GroupWithDetails {
    pub fn new() -> GroupWithDetails {
        GroupWithDetails {
            name: None,
            slug: None,
            created_at: None,
            default_project_role: None,
            projects: None,
            members: None,
        }
    }
}
 