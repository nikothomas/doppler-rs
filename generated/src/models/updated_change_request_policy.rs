/*
 * Core
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/*
 * Core
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-oas3.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, NaiveDate, Utc};
/// UpdatedChangeRequestPolicy
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdatedChangeRequestPolicy {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String >,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String >,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String >,
    #[serde(rename = "rules", skip_serializing_if = "Option::is_none")]
    pub rules: Option<Vec<serde_json::Value> >,
    #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
    pub targets: Option<models::PolicyTargets >,
}

impl UpdatedChangeRequestPolicy {
    pub fn new() -> UpdatedChangeRequestPolicy {
        UpdatedChangeRequestPolicy {
            id: None,
            name: None,
            description: None,
            rules: None,
            targets: None,
        }
    }
}
 